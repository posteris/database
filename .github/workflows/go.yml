name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


permissions: write-all


jobs:

  # golangci:
  #   name: Go Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v2
  #       with:
  #         version: latest

  # build:
  #   name: Build and Test
  #   needs: golangci
    
  #   runs-on: ubuntu-latest
    
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       goVersion: ["1.18", "1.17", "1.16", "1.15", "1.14", "1.13"]
    
  #   steps:
  #   - name: Clone Repository 
  #     uses: actions/checkout@v3
  #     with:
  #         fetch-depth: 0

  #   - name: Set up Go
  #     uses: actions/setup-go@v3
  #     with:
  #       go-version: ${{ matrix.goVersion }}

  #   - name: Setup PostgreSQL
  #     uses: Harmon758/postgresql-action@v1.0.0
  #     with:
  #       postgresql db: postgres
  #       postgresql user: postgres
  #       postgresql password: postgres

  #   - name: Setup MySQL
  #     uses: mirromutth/mysql-action@v1.1
  #     with:
  #       mysql root password: mysql
  #       mysql database: mysql

  #   - name: Test
  #     run: go test -v ./...
      
  # sonar:
  #   runs-on: ubuntu-latest
  #   needs: build
    
  #   name: SonarCloud Scan
    
  #   steps:
  #     - name: Setup PostgreSQL
  #       uses: Harmon758/postgresql-action@v1.0.0
  #       with:
  #         postgresql db: postgres
  #         postgresql user: postgres
  #         postgresql password: postgres

  #     - name: Setup MySQL
  #       uses: mirromutth/mysql-action@v1.1
  #       with:
  #         mysql root password: mysql
  #         mysql database: mysql
    
  #     - name: Clone Repository
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: Test and coverage executions
  #       run: |
  #         mkdir -p bin
  #         go test -short -coverprofile=bin/cov.out ./...
  #     - name: Analyze with SonarCloud
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Horusec:
    runs-on: ubuntu-latest
    # needs: build


    name: Horusec Scan
      
    container:
      image: horuszup/horusec-cli:latest
      # credentials:
      #   username: _json_key
      #   password: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
      options: --privileged

    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run Horusec
        run: |
          horusec version
          horusec start -e="true" -p ./ -P /github/workspace

      # - name: Run Horusec
      #   uses: gsdenys/horusec-action@main
      #   with:
      #     arguments: -p ./ -P /github/workspace
        

        
        # -c horusec-config.json